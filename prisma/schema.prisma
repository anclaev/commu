generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Rank {
  Private
  Corporal
  LanceSergeant
  Sergeant
  StaffSergeant
  SergeantMajor
  WarrantOfficer
  SeniorWarrantOfficer
  Lieutenant
  SeniorLieutenant
  Captain
  Major
  LieutenantColonel
  Colonel
}

model Employee {
  id String @id @default(uuid())

  name    String?
  surname String?

  salary       Int?
  personal_key String?

  rank Rank @default(value: Private)

  login    String @unique
  password String

  duty_numbers DutyNumber[]

  duty_members         DutyMember[]
  training_theme_owner TrainingTheme[]
}

model Department {
  id         String @id @default(uuid())
  name       String
  short_name String

  duty_numbers DutyNumber[]
  combat_posts CombatPost[]
}

model DutyNumber {
  id     String @id @default(uuid())
  number String
  alias  String

  department    Department @relation(fields: [department_id], references: [id])
  department_id String

  combat_post    CombatPost @relation(fields: [combat_post_id], references: [id])
  combat_post_id String

  duty_members DutyMember[]

  employees Employee[]
}

model CombatPost {
  id   String @id @default(uuid())
  name String @unique

  department    Department @relation(fields: [department_id], references: [id])
  department_id String

  duty_numbers DutyNumber[]
}

model DutyMember {
  id     String @id @default(uuid())
  rating Int    @default(5)

  employee    Employee @relation(fields: [employee_id], references: [id])
  employee_id String

  duty_number    DutyNumber @relation(fields: [duty_number_id], references: [id])
  duty_number_id String

  duty    Duty?   @relation(fields: [duty_id], references: [id])
  duty_id String?

  reviews       Review[]
  reviews_owner ReviewOwner[]

  trainings       Training[]
  trainings_owner TrainingOwner[]
}

model Review {
  id     String @id @default(uuid())
  text   String
  rating Int    @default(5)

  member    DutyMember @relation(fields: [member_id], references: [id])
  member_id String

  owner ReviewOwner?
}

model ReviewOwner {
  id String @id @default(uuid())

  owner    DutyMember @relation(fields: [owner_id], references: [id])
  owner_id String

  review   Review @relation(fields: [reviewId], references: [id])
  reviewId String @unique
}

model TrainingTheme {
  id   String @id @default(uuid())
  name String

  owner    Employee @relation(fields: [owner_id], references: [id])
  owner_id String

  trainings Training[]
}

model Training {
  id     String @id @default(uuid())
  rating Int    @default(5)

  theme    TrainingTheme @relation(fields: [theme_id], references: [id])
  theme_id String

  owner    TrainingOwner @relation(fields: [owner_id], references: [id])
  owner_id String

  duty    Duty   @relation(fields: [duty_id], references: [id])
  duty_id String

  members DutyMember[]
}

model TrainingOwner {
  id String @id @default(uuid())

  owner    DutyMember @relation(fields: [owner_id], references: [id])
  owner_id String

  trainings Training[]
}

model Duty {
  id String @id @default(uuid())

  start DateTime
  end   DateTime
  date  DateTime

  rating Int @default(5)

  members   DutyMember[]
  trainings Training[]
}
